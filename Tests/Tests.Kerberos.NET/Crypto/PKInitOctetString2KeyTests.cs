using System;
using System.Linq;
using Kerberos.NET.Crypto;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests.Kerberos.NET
{
    [TestClass]
    public class PKInitOctetString2KeyTests
    {
        // Test vectors originally from RFC 4556 Appendix B
        // https://tools.ietf.org/html/rfc4556#appendix-B

        [TestMethod]
        public void String2Key_256_0()
        {
            var key = new byte[256];

            var rnd = new Random(42);
            rnd.NextBytes(key);

            var result = PKInitString2Key.String2Key(key, 32);

            var expected = new byte[]
            {
                0xa6, 0x7d, 0xe3, 0x4e, 0x21, 0x43, 0xca, 0x92, 0xd5, 0x23, 0x1f, 0xae, 0x09, 0x8a, 0xfb, 0x6c,
                0x83, 0xc6, 0xa9, 0xd9, 0x1a, 0x24, 0x06, 0x27, 0x07, 0x9e, 0x84, 0x55, 0xe6, 0xe8, 0x82, 0xde
            };

            Assert.IsTrue(result.Span.SequenceEqual(expected));
        }

        [TestMethod]
        public void String2Key_128_0()
        {
            var key = new byte[128];

            var rnd = new Random(42);
            rnd.NextBytes(key);

            var result = PKInitString2Key.String2Key(key, 32);

            var expected = new byte[]
            {
                0x6a, 0xe5, 0x60, 0xd3, 0x94, 0x66, 0x3f, 0xd5, 0x96, 0xca, 0xe6, 0x7b, 0xee, 0x81, 0x61, 0xb4,
                0x49, 0xe1, 0x0c, 0xea, 0x78, 0x1b, 0xeb, 0x28, 0x42, 0xf7, 0x89, 0x98, 0x70, 0xd9, 0x33, 0xed
            };

            Assert.IsTrue(result.Span.SequenceEqual(expected));
        }

        [TestMethod]
        public void String2Key_128_IncrementingSequence_Len_77()
        {
            var key = new byte[77]
            {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
                0x0e, 0x0f, 0x10, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
                0x0d, 0x0e, 0x0f, 0x10, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
            };

            var result = PKInitString2Key.String2Key(key, 32);

            var expected = new byte[]
            {
                0x00, 0x53, 0x95, 0x3b, 0x84, 0xc8, 0x96, 0xf4, 0xeb, 0x38, 0x5c, 0x3f, 0x2e, 0x75, 0x1c, 0x4a,
                0x59, 0x0e, 0xd6, 0xff, 0xad, 0xca, 0x6f, 0xf6, 0x4f, 0x47, 0xeb, 0xeb, 0x8d, 0x78, 0x0f, 0xfc
            };

            Assert.IsTrue(result.Span.SequenceEqual(expected));
        }
    }
}
